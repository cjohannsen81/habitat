---
title: Habitat - Define Dependencies and Callbacks
---

section
 h1 Define Dependencies

 p Based on the detection logic built into the Ruby scaffolding, you should be able to build a basic package for your web application following the instructions in #{link_to 'Create Your Plan','/tutorials/buid-your-own/create-plan/'}; however, if you require any customization of runtime dependencies or how your package is built, you will need to reference those dependencies in your plan. In addition, depending on how you wish to build your package, you may have to override the default build and installation logic of the Ruby scaffolding. 

 p This topic explains your options for these customizations and in which scenarios you are most likely to need them.

 h2 Build and runtime dependencies

 p Dependencies are broken up into two main types: build dependencies and run dependencies. Build dependencies are needed while your package builds and run dependencies are those packages needed when your Habitat service is running.

 p As part of the detection logic of the Ruby scaffolding, it will parse your Gemfile and if it detects one of the following gems, it will add entries to the <code>pkg_deps</code> array for your plan so that those runtime dependencies are packaged up with your application.

 ul
  li sqlite3
  li Any PostgreSQL-related gems (see #{link_to 'Connect to Database','/tutorials/build-your-own/connect-database/'} topic for more information)
  li nokogiri
  li execjs
  li webpacker
 
 p If you require additional runtime or buildtime dependencies, you can add them into your plan.sh using the <code>pkg_deps</code> and <code>pkg_build_deps</code> settings, respectively. For example, in the Build a Sample App tutorial, the health_check hook requires the <code>code/curl</code> package so that it can execute a <code>curl</code> command. This package isn't already part of the runtime dependencies added by the scaffolding, so it must be added to the plan.sh manually.

 p You should include dependencies that would natively be part of the build or runtime dependencies your application or service would normally depend on. You can include version and release information when declaring dependencies if your application is bound to that version.

 p There is a third type of dependencies, transitive dependencies, that are the run dependencies of either the build or run dependencies listed in your plan. You do not need to explicitly declare transitive dependencies, but they are included in the list of files when your package is built. See #{link_to 'Package contents','/docs/reference/package-contents/'} for more information.

 h2 Use the Depot UI to search for dependencies

 p The core Habitat team and community have packaged up thousands of packages for you to use in a repository known as the depot. By going to #{link_to 'Explore','https://bldr.habitat.sh/#/explore'} on the Habitat website, you can search for dependency packages built by the core team and members of the community that live in the public Depot.

 .screenshot
    img src="/images/screenshots/explore-tab-main-screen.png"

 p Type in the name of your dependency (such as <code>node</code> or <code>nginx</code>). You will get a search result list back from the depot that matches your query. Any packages with the origin "core" are foundational packages managed and maintained by the #{link_to 'Habitat maintainers','https://github.com/habitat-sh/habitat/blob/master/MAINTAINERS.md'}. 

 .screenshot
    img src="/images/screenshots/search-node-depot.png"

 p Clicking on one of the entries will show you all of the versions of that package that have been uploaded to the depot.

 .screenshot
    img src="/images/screenshots/node-version-drilldown.png"

 p By convention, version numbers align with the version of the binary, library, or framework that the package has bundled up. For example, the <code>core/node</code> version 6.10.3 package has v6.10.3 of the Node.js binary. Clicking on a version in the results list will present you with additional information about that package.

 .screenshot
    img src="/images/screenshots/node-channel-list.png"

 p This view into a specific version shows you the complete package identifier for a given package. The complete identifier for a package is <code>ORIGIN/PACKAGE/VERSION/RELEASE</code>. For more information on package identification, see #{link_to 'Packages','https://www.habitat.sh/docs/concepts-packages/'}. 

 p This view also provides channel information about the package, as denoted by <code>stable</code> and <code>unstable</code> in the UI. Channels function like continuous delivery stages in a pipeline (development, QA, production, etc.). When packages are initially uploaded to the depot, they are placed in the <code>unstable</code> channel, and by default, only <code>stable</code> packages are downloaded and installed in a given container, virtual machine, etc unless otherwise specified through the <code>hab start</code> and <code>hab svc load</code> commands. 
 
 p By convention, the latest version number with the latest build date will be the stable version of the package.

 p After you have decided on a version, click on it to see the #{link_to 'manifest','/docs/reference/package-contents#manifest'}  for the package. 

 .screenshot
    img src="/images/screenshots/node-package-details.png"

 p All specific information on how that package was built will be contained within the manifest and if it is a core package, the plan for that package will be in the #{link_to 'core-plans','https://github.com/habitat-sh/core-plans'} repo in GitHub.


= link_to 'Next: Define Build Logic For Your App', '/tutorials/build-your-own/define-build-logic/', class: 'button cta'