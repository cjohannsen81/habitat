---
title: Habitat - Add Configuration
---

section
 h1 Add Configuration

 p To make your app's package useful in more environments and contexts, you can templatize the environment variables and configuration settings of your application. The values for these variables and settings will be computed at runtime and can be used to dynamically configure your application.

 h2 Using pre-defined Scaffolding configuration

 p There are several environment variables that you can set when starting up a Rails application. The following come from environment variables set by the Ruby scaffolding and are placed in a file called app_env.sh that is created by the scaffolding and located in the <code>/hab/svc/package/config/</code> directory. When the initialization hook is executed, the following <code>export</code> commands are run in the context of the initialization hook, which allows it to have access to connection string data and deployment values.

 pre
  code
   |
    export RACK_ENV='production'
    export SECRET_KEY_BASE=''
    export RAILS_SERVE_STATIC_FILES='enabled'
    export LANG='en_US.UTF-8'
    export RAILS_ENV='production'
    export RAILS_LOG_TO_STDOUT='enabled'
    export PORT='8000'
    export DATABASE_URL='postgresql://package:package@172.17.0.2:5432/package_production'

 p The next section describes how the Ruby scaffolding sets these values through the default.toml file and how you can override these values by updating the default.toml file either at build time or dynamically at runtime.
 
 h2 Specifying config settings in default.toml

 p As shown in the previous section, the Ruby scaffolding exposes and specifies the following for each app:

 ul
  li lang: Used to set the <code>$LANG</code> environment variable when the app runs. Defaults to "en_US.UTF-8".
  li app.port: Used to set the listen port number that corresponds to the <code>$PORT</code> environment variable. It is also used to set the value of the exported "port" key. Defaults to 8000.

 p By default, the detected app type will determine some of the config settings in the default.toml. For example, the Ruby scaffolding creates the following default.toml file for a Rails app that has a PostgreSQL database configured in the <code>config/database.yml</code> file for the app.

 pre
  code
   |
    # Rails' secret key base is required and must be non-empty
    # You can run 'rails secret' in development to generate
    # a random key string.
    secret_key_base = ""

    lang = "en_US.UTF-8"
    rack_env = "production"
    rails_env = "production"

    [app]
    port = 8000

    [db]
    adapter = "postgresql"
    name = "myrailsapp_production"
    user = "myrailsapp"
    password = "myrailsapp"

 p  To customize your app's config settings, create a default.toml file in your plan. You can choose to override one or all of the values that are created for you by the Ruby scaffolding. You can also add your own configuration elements to templatize native configuration files and set environment variables at start up.

 p If you choose to only override a partial set of values, the default values already set on the service will be merged with your changes. 

 p For more information on how to configure plans, see #{link_to 'Add configuration to plans','/docs/create-packages-configure/'}.

= link_to 'Next: Build and Test', '/tutorials/build-your-own/build-test/', class: 'button cta'