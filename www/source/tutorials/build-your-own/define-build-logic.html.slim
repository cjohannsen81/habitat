---
title: Habitat - Define Build Logic For Your App
---


section
 h1 Define Build Logic For Your App

 p When building your package, your project source (or pre-bulit binary) goes through a series of steps as part of the package compilation process. Depending on whether or not your Habitat plan resides in the same repo as your project, these steps could include downloading your source, unpacking it, building it, and then installing it into the appropriate location within a habitat package. 
 
 p The default behavior for these build steps are defined in callbacks, which are functions called by Habitat when building your package. When overriding any #{link_to 'callbacks','/docs/reference/callbacks'}, you may use any of the #{link_to 'build variables','/docs/reference/build-variables/'}, #{link_to 'settings','docs/reference/basic-settings/'}, or #{link_to 'functions','/docs/reference/utility-functions/'} in the #{link_to 'Plan syntax guide', '/docs/reference/plan-syntax'}, except for the #{link_to 'runtime configuration settings','/docs/reference/runtime-settings/'}. Those can only be used in runtime hooks once a Habitat service is running.

 h3 Using Scaffolding functionality

 p Scaffoldings override callbacks in much the same way you can override them in your plan. The default behavior is changed and new functionality is introduced to make sure your web application is packaged appropriately with minimal intervention by you.

 p The following are a set of functions that are called by the Ruby scaffolding. They themselves override default implementations of functions that are used in callbacks by Habitat when building packages. For example, the <code>do_build()</code> has a <code>do_default_build()</code> function that gets called inside of it. The <code>do_default_build()</code> function performs the following actions:

 pre
  code
   |
    ./configure --prefix=$pkg_prefix
     make

 p The implementation of <code>do_default_build()</code> in the Ruby scaffolding overrides this behavior; however, there is no general override of the <code>do_build()</code> callback. This allows you a great amount of flexibility to both override existing behavior as well as wrap your own custom build logic around the implementions provided by the scaffolding.
 
 p The following are the list of overridden scaffolding functions that can be overridden by you, or left to their default implementations.

 ul
  li <b>do_default_prepare</b>: Sets the gem path where gems will ultimately be installed in your package. Called in the <code>do_prepare()</code> callback. Overrides the existing behavior of the default <code>do_default_prepare()</code> function.
  li <b>do_default_build</b>: Cleans out existing gem cache, corrects rubygems shebangs to point to the correct location in your package, performs application and database configuration setup tasks. Called in the <code>do_build()</code> callback. Overrides the existing behavior of the default <code>do_default_build()</code> function.
  li <b>do_default_install</b>: Installs your web application, gems, creates binstubs, creates all necessary symlinks, and creates a process bin directory for #{link_to 'processes','/tutorials/build-your-own/define-processes/'} like `rake` and `console`. Called in the <code>do_install()</code> callback. Overrides the existing behavior of the default <code>do_default_install()</code> function.

 p As described above, if you want to use the default scaffolding functionality, but also want to perform additional setup, configuration, or other logic, you must override the <code>do_build()</code> callback.

 pre
  code
   |
    do_build() {
     # Execute business logic before calling the default scaffolding implementation.
  
     # This calls the default scaffolding implementation, like
     # calling `super` in other languages.
     do_default_build
     
     # Execute business logic after calling the default scaffolding implementation.
    }
   
 p If you wanted to override the default behavior of the scaffolding, then you would simply omit the <code>do_default_build</code> line above and place your custom logic inside a <code>do_build()</code> override.

= link_to 'Next: Define Hooks', '/tutorials/build-your-own/define-hooks/', class: 'button cta'