---
title: Habitat - Define Hooks
---

section
 h1 Define Hooks

 p Similar to defining the setup and installation experience at buildtime, behavior for your application or service needs to be defined when the supervisor starts it. This is done at runtime through event hooks. Hooks are script files with #{link_to 'shebangs', 'https://en.wikipedia.org/wiki/Shebang_(Unix)'} that you can use to customize this behavior. 
 
 p The following hooks are available:

 ul
  li init
  li run
  li health_check
  li reconfigure
  li file_updated
  li reload
  li suitability
  li post_run
  li smoke_test

 p There are many hooks available for you to use; however, the majority of plans only use a few. Specifically, the init and run hooks are customized the most; however, the only required hook is the run hook, and if you are only calling a built binary, you can specify that through a <code>pkg_svc_run</code> setting. Anything more complicated than running a binary and pointing to a local configuration file in the <code>config</code> directory will require you to create a custom run hook.

 p See #{link_to 'Hooks', '/docs/reference/hooks'} for more information and examples on the complete list of hooks.

 h2 Scaffolding-generated Hooks

 p Scaffoldings are meant to provide you a default package that handles the majority of use cases for your web application by auto-detecting the application type. In the case of the Ruby scaffolding, the init and run hooks are created for you during build time, unless overridden. They detect which gems your application references and its app type (Rails, Rack, etc.) to determine what the logic should be in the init and run hooks.
 
 p The default init hook does the following:

 ul
  li Sets up the environment variables for your Rails app to connect to a database.
  li If your app type is a supported Rails app (version 4.1, 4.2, or 5.x), it will prompt you to set the <code>SECRET_KEY_BASE</code> value before initialization can complete.
  li If your app references the <code>pg</code> gem in your Gemfile.lock, it will attempt to connect to a PostgreSQL database (either as a standalone database, or as another Habitat package).

 p Once your web application has finished initializing, the run hook is executed. The run hook generated by the Ruby scaffolding uses the default run hook generated by the studio by using the <code>pkg_svc_run</code> setting. It executes the <code>web</code> process to bring up a web server for your application. For more information on the web process, see #{link_to 'Define Processes','/tutorials/build-your-own/define-processes/'}.

 p If the default logic used in these hooks will not work for your application, you can create your own init and run hooks and place them within your <code>habitat/hooks</code> directory. User-generated plan files (such as hooks) take precedence over scaffolding-generated files. 
 
 h2 Helper functions

 p The following are the most-used helper functions and variables when implementing hooks:

 ul
  li <b>pkgPathFor</b>: Used to provide the root path for a package within your application's dependency tree. This is useful if your hook requires a binary or file from a dependent package.
  pre
   code
    |
     {{pkgPathFor "core/nginx"}}/config/fastcgi.conf

  p This path points to the <code>fastcgi.conf</code> file that resides in the <config> directory of the Nginx package.

  
 p For more helper functions that can be used in runtime hooks, see #{link_to 'Advanced Helpers','/docs/create-packages-configure#advanced-helpers'}.

 h2 Using runtime settings  

 p Habitat allows you to reference configuration values set at runtime. These can be helpful in your hooks if you need to reference port numbers, IP addresses, or other values when performing business logic during the lifecycle of your running service.
 
 p You can use #{link_to 'runtime configuration settings','/docs/reference/runtime-settings'} in your hooks. These include #{link_to 'user-created configuration settings','/tutorials/build-your-own/add-config/'} defined by you in your config file, or built-in values defined by Habitat. 

= link_to 'Next: Define Environment Variables', '/tutorials/build-your-own/define-variables/', class: 'button cta'